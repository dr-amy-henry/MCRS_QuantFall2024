---
title: "Data Wrangling with dplyr (tidyverse)"
author: "Amy Henry"
last modified: "August 22, 2024"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Data Wrangling with `dplyr` and `tidyr` (backbone of the `tidyverse`)

This tutorial will walk you through how to import and manipulate data frames using functions from the `tidyverse` packages.

### Loading Packages

There are two ways to access functions and objects from packages. First, the way we already know, is to load the whole package at once using the `library()` function

Load packages:

```{r load packages, echo = FALSE, message=FALSE, warning = FALSE}
library(tidyverse)
library(gapminder)
```

Another way, if you only have one function/object you want from a particular package, is to use the `::` operator. The package still needs to be installed, but this way you minimize the risk of conflicting packages and run a little more efficiently.

This code will load a data set from the `titanic` package for us, without loading the whole `titanic` package.

```{r package part}
# install.packages("titanic")
titanic <- titanic::titanic_train
original_titanic <- titanic::titanic_train
```

### Importing Data

#### From a .csv file, from Excel or other spreadsheet software

My favorite way to import data is to convert my spreadsheets to CSV (in excel or Google Sheets) and import the data using the `read_csv()` function from the *`readr`* package. The benefit of this method is that its very reproducible - data in CSV format is very stable and portable across different platforms, and it will always import the same way for anyone who uses your code.

**"Assigning" an object with `<-`**

Remember, whenever you do something in R, you need to save it to an object name using the "`<-`" arrow. If you don't do that, it will "print" the result below and just show you the answer, but not save it. When you save it, it also will not print it.

The readr package also handles other file types. When it imports your data, it will fill in spaces in column names with underscores and will make a best guess as to the data type (i.e., numeric, character, factor, etc.)

```{r importing}
#install.packages("readr")
library(readr)
CDM2 <- read_csv("CDM_data.csv")
CDM2
```

These two functions also import the data into two slightly different formats. `read_csv()` creates a tibble, which is a special data frame that gives more useful error messages.

#### From RData files

If someone has given you a *.Rdata* file, this is an R file type that contains multiple data objects so that you can easily import them and use them without having to rename all the objects. Check the "Environment" pane in the upper right - you'll see a whole bunch of new objects. Try viewing a few of them.

```{r}
load("S4E2e.RData")
head(ps)
```

You'll notice that many of them don't look the same as when you viewed your imported .csv above. When you use the `read_csv()` function, it will automatically parse it as a data frame, in which the columns are all variables and the rows are observations.

The objects in this *.Rdata* file are stored as matrices - it stores the data in a grid, but doesn't assume that the columns are variables. This is easy to convert to a tibble or a data frame:

```{r}
ps_dataframe <- as.data.frame(ps)
ps_dataframe

#install.packages(tidyverse)
library(tidyverse)
sward2_tibble <- as_tibble(sward2)
sward2_tibble
```

#### From published data sets stored as R packages

Finally, if you're importing data from a data set that has been published for use in R, you can import it by loading the packages that contains those data sets.

Here is the information page about what data sets are contained in the fivethirtyeight package. https://www.rdocumentation.org/packages/fivethirtyeight/versions/0.6.1 This page lists the names of the data sets, so that you can do analyses on them as well.

```{r}
#install.packages("fivethirtyeight")
library(fivethirtyeight)

```

#### Viewing data

Once a data set is imported, its important to look it over to get the lay of the land.

**Call the object by just typing its name:**

```{r}
candy_rankings
```

**names()** : Only the column names:

```{r}
names(bob_ross)
```

**glimpse()** : Column names, data types, and a preview of the data:

```{r}
glimpse(candy_rankings)
```

While we all love View() as a function for looking at our data in nice spreadsheet form, it does get annoying in a Quarto file (anything that makes a pop-up window will), so it's best to only use that in the console or to comment it out whenever possible.

```{r}
# View(candy_rankings)
```

For displaying finished data or tables in a report, another way (that makes very nice tables with less spaces) is **kable()**, from the knitr package. This format is easier to copy and paste and looks nicer in your knitted output file.

Notice how we used the **kable()** function from the knitr package using the double colon **::** operator we learned above!

```{r}
#install.packages("knitr")
# library(knitr)
knitr::kable(head(CDM2))
```

The data we'll use today has details about the passengers on the Titanic.

Step 1: we import our data.

```{r titanic data, echo = FALSE, message=FALSE, warning = FALSE}
titanic <- titanic::titanic_train
original_titanic <- titanic::titanic_train
```

Let's look at the data. What variables do we have to work with? What do you notice about the data that might be easier to read, type, interpret, or graph in some other format?

```{r}
glimpse(titanic)

View(titanic)

```

## Key functions for data wrangling

We are going to focus on five major functions for data manipulation in today's exercise:

1.  **filter() -** for creating subsets of a data frame with only rows that meet a condition

2.  **arrange() -** for reordering the observations by value

3.  **select() and its buddy, rename() -** for creating a data frame with only certain columns, or changing column names

4.  **mutate() -** for adding new columns

5.  **summarize() -** for applying calculations that summarize a variable across many rows

and finally, the one that makes them all the MOST useful:

6.  **group_by() -** for specifying the variables that you'd like separate computations for different levels of the variable

#### How do these functions work?

1.  The first [argument]{.underline} (or the argument before the pipe) is a data frame.
2.  The subsequent arguments describe what to do with the data frame, using the variable names (without quotes).
3.  The result is a new data frame.

*newdataframe \<- function( data, argument1 = Var1, argument2 = Var2, etc.)*

#### Pipes: the easy way to string together multiple functions

`|>` is a pipe. (vertical bar, on the same key as the backslash `\`.

You can think of it as substituting for the words "**and then**". It passes the output of everything before it into the function after the pipe as the data or input argument. This will make more sense in practice! Here is an example:

```{r}
# say you want to create a vector of numbers, then take the average of those numbers, then round to the nearest whole number. One way to do this is to nest the functions, so that each is applied to the output of the one it contains: 

round(mean(c(2,2,4)))

# this is not especially intuitive - it looks like the first thing that R will do is round, when mathematically that can't happen first. 

# with pipes, the same computation becomes:

# first create the vector using c() "concatenate"
c(2,2,4) |> # "and then" take the mean
  mean() |> # "and then" round the result
  round()
```

### 1. `filter()`: picking observations by their values

Do you want to only look at SOME of the values of a data set, instead of all of them? Pick out only ones that meet certain conditions?

Then *filter()* is the function for you.

#### Conditional Statements & Logical Operators

Logical operators are symbols that join values in a statement. These include AND, OR, greater than, less than, etc. For our purposes, we use them as a test. we can use them to ask R whether an object, row, variable, meets a condition.

```{r}
# an object
x <- 5

# Is x less than 10? 
x < 10

```

```{r}
# Is x greater than 6? 
x > 6
```

because "=" is used so often in other situations in R (within arguments, to assign objects etc.), for conditional statements like "Does this exactly equal that", we use "`==`" to test.

```{r}
x == 5
```

##### Key to Logical Operators:

-   **`>`**, **`<`** : greater than, less than

-   **`=>`**, **`=<`**, : greater than or equal to, less than or equal to

-   **`!=`** : NOT equal to

-   **`==`** : exactly equal to

-   **`%in%`** : value appears within the array

-   **`&`** : AND

-   **`|`** : OR

The `filter()` function turns this logical statement into a **conditional statement** (e.g., only the observations from site 1, or only values greater than 10), we pass the R function a statement (usually including a logical operator) which it then applies to each row of the data frame and determines if it is `TRUE` or `FALSE` for that row. In a conditional statement, we tell R, "If statement is `TRUE`, then do THIS".

Say we want to only look at data about the survivors of the Titanic. All we need to do is put in our data, our argument, which here is the variable on which we want to sort, plus the condition.

```{r}
titanic |>
  filter(Survived == TRUE)
```

What else might be interesting to filter by?

```{r}
titanic |> 
  filter(Age <= 18)
```

### 2. `arrange()`

`arrange()` reorders the observations by values or categories.

What if we want to sort the passengers from youngest to oldest?

```{r}
titanic |> 
  arrange(Age)
```

How about the other way around?

```{r}
titanic |> 
  arrange(-Age)
```

Can you sort the data frame by `Fare`, from most to least expensive?

```{r}

```

### 3. `select()`

`select()` makes a new data frame with only certain columns

This is easy too! There are too many columns in this dataframe and its confusing. Let's pick only a few that we care about.

```{r}
titanic |>
  select(Fare, Age)
```

The - sign reverses it, signaling to keep all the columns EXCEPT Fare and Age.

```{r include=FALSE}
titanic |>
  select(-Fare, -Age)
```

Select can also choose columns that meet certain conditions - this isn't a good data set to demonstrate it, but just know that it can pick columns based on: `starts_with()` `ends_with()` `contains()` `matches()` etc.

```{r eval=FALSE}

```

#### Combining functions using pipes

Here's where the beauty of pipes comes in. Want to make a data frame that has only `Fare` and `Age` of all survivors? Easy. Just add a second pipe.

```{r}
titanic |> 
  filter(Survived == TRUE) |> 
  select(Fare, Age)
```

Can we make a data frame that has `Fare` and `Age` of passengers in second and third class?

To do this, you will need to use more than one conditional statement, which are pretty easy to string together above.

```{r eval = FALSE}
titanic |>
  filter(Pclass == 2 | Pclass == 3) |> 
  select(Pclass, Fare, Age)

# OR
titanic |>
  filter(Pclass != "1") |> 
  select(Pclass, Fare, Age)
```

### 4. `mutate()`

`mutate()` makes a new variable/column.

Perhaps we want to know how old the passengers would be if they were alive today. We would make a new column that has the age when they were on the boat plus the number of years that have elapsed since the Titanic sank.

The format for mutate is: `mutate(data, newcolumn_name = computation)`

```{r}
titanic <- titanic |>
  mutate(age_new = Age + 109)
# remember to assign!

```

Now, once we've assigned it to the `titanic` object, that object is changed and has that new column forever! Our old dataframe is gone. [Be careful when assigning your new data frame to the old name!]{.underline} Better to do something like this, where you have your raw data be "titanic-raw" or "original_titanic" just in case you mess it up.

```{r}
titanic <- original_titanic |> 
  mutate(age_new = Age + 108) |> 
  mutate(Survived = as.logical(Survived)) |> 
  mutate(Pclass = as.factor(Pclass)) |> 
  mutate(Embarked = as.factor(Embarked))
```

#### `rename()`

`rename()` makes changing the column names extremely easy. Sometimes they're ugly and annoying - for example, "`My great column name (cm)`" is awful to type multiple times and has bad spaces and punctuation, so we want our column names more streamlined (e.g, "`MyCol_cm`").

`rename(newname = oldname)`

```{r eval = FALSE}
titanic |> 
  rename(passenger_id = PassengerId) 
```

Can you write a line that renames `passenger_id` and also selects only `Survived`, `Fare`, `Age`, and `Pclass`?

```{r eval=FALSE}
titanic |> 
  rename(passenger_id = PassengerId) |> 
  select(Survived, Fare, Age, Pclass)
```

#### mutating using `case_when()`

Want to rekey some of the values themselves, based on certain conditions? `case_when()` is like an "if... then" statement.

```{r eval = FALSE}
# mutate(NewColName = case_when( 
#     Variable == "old value" ~ "new value", 
#     Variable == "different old value" ~ "different new value", 
#     is.character(Variable) == TRUE ~ Variable

# the last line tells R to keep any other values the same. 

titanic |> 
  mutate(Embarked = case_when(
    Embarked == "C" ~ "Cherbourg",
    Embarked == "Q" ~ "Queenstown", 
    Embarked == "S" ~ "Southampton"
  ))
```

### 5. `count()`

`count()` tallies the number of observations of each value/level in the designated column.

What is generated when you run this line of code?

```{r}
titanic |>
  count(Survived)
```

We can make it even more useful by combining it with `mutate`:

```{r}
#makes a percentage! neat.
titanic |> 
  count(Survived) |> 
  mutate(prop = n/sum(n))
```

It can count based on multiple conditions too!

```{r}
# multiple classes
titanic |> 
  count(Survived, Pclass)
```

### 6. `summarize()`

`summarize()` performs functions that collapse many rows down to only a few rows based on specified functions, generating a new data frame with "summaries".

```{r}
titanic |> 
  summarize(mean(Fare))

titanic |> 
  summarize(mean(Age, na.rm = TRUE))
```

It can do as many summaries as you want! And name the columns that it goes into.

```{r eval = FALSE}
titanic |> 
  summarize(mean_fare = mean(Fare), 
            sd_fare = sd(Fare), 
            var_fare = var(Fare), 
            minfare = min(Fare), 
            maxfare = max(Fare), 
            count = n())

```

#### `group_by()`

Notice how above it calculated one mean fare for the whole table. What if you want to know the mean fare by class? Or whether passengers survived or not? **`group_by()`** takes the specified variables and calculates separate summary values for the categories of that variable, which is hecking useful.

```{r eval = FALSE}
titanic |> 
  group_by(Pclass) |> 
  summarize(mean_fare = mean(Fare), 
            sd_fare = sd(Fare), 
            var_fare = var(Fare), 
            minfare = min(Fare), 
            maxfare = max(Fare), 
            count = n())
```

### Bonus functions

### `pivot_wider()` and `pivot_longer()`

`pivot_wider()` & `pivot_longer()` change rows to columns and vice versa. This is not super easy to visualize - I recommend watching the animation on this webpage a few times: <https://github.com/batpigandme/tidyexplain/tree/pivot>

**Pivoting to move from wide to long data:**

```{r}
gapminder_wide <- 
  gapminder |> 
  pivot_wider(id_cols = country,
              names_from = year,
              values_from = lifeExp)

```

**Pivoting back from long to wide data:**

```{r}
gapminder_long <- 
  gapminder_wide |> 
  pivot_longer(names_to = "Year",
               values_to = "Life_Expectancy",
               cols = 2:13)
```

### `bind_rows()` and `bind_cols()`

`bind_rows()` and `bind_cols()` are two functions you can use to add one data frame to another; I like to think of it as stapling one onto the other - it just tacks it to the bottom. Important: they don't work if they don't have a matching number of columns or rows so that they can align nicely.

```{r}
fake_data_1 <- tibble(
  Col1 = seq(1:10),
  Col2 = rep(5, 10), 
  Col3 = rep(c("alpha", "beta"), 5)
)

fake_data_2 <- tibble(
  Col1 = seq(11:25),
  Col2 = rep(10, 15), 
  Col3 = rep(c("gamma", "delta", "epsilon"), 5))

nrow(fake_data_1)
nrow(fake_data_2)
  
bind_rows(fake_data_1, fake_data_2) |> nrow()


### bind_cols()

color_vector <- c("pink", "blue", "aquamarine", "tan", "yellow",
          "coral","purple", "deepskyblue", "red", "green" )

bind_cols(fake_data_1, Col4 = color_vector)
```
